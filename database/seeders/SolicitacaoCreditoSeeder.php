<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\SolicitacaoCredito;
use App\Models\Usuario;

class SolicitacaoCreditoSeeder extends Seeder
{
    public function run(): void
    {
        // Desabilitar foreign key checks temporariamente
        \DB::statement('SET FOREIGN_KEY_CHECKS=0;');

        $this->command->info('üóëÔ∏è Limpando solicita√ß√µes de cr√©dito existentes...');
        SolicitacaoCredito::truncate();

        \DB::statement('SET FOREIGN_KEY_CHECKS=1;');

        // Buscar usu√°rios existentes
        $usuarios = Usuario::all();

        if ($usuarios->count() < 3) {
            $this->command->warn('‚ùå Necess√°rio pelo menos 3 usu√°rios! Crie usu√°rios primeiro.');
            return;
        }

        $this->command->info("üìä Encontrados {$usuarios->count()} usu√°rios para gerar solicita√ß√µes");

        $solicitacoesExemplo = [
            [
                'valor_solicitado' => 5000.00,
                'status' => 'Pendente',
                'descricao_solicitante' => 'Solicita√ß√£o de cr√©dito para expandir opera√ß√µes na regi√£o Sul. Pretendemos abrir duas novas filiais e precisamos de capital de giro para os primeiros 3 meses.',
                'comentario_agencia' => null,
                'matriz_aprovacao' => null,
                'comentario_matriz' => null,
                'motivo_rejeicao' => null,
            ],
            [
                'valor_solicitado' => 15000.00,
                'status' => 'Em An√°lise',
                'descricao_solicitante' => 'Necess√°rio cr√©dito para aquisi√ß√£o de equipamentos modernos e melhoria da infraestrutura tecnol√≥gica da empresa.',
                'comentario_agencia' => 'Solicita√ß√£o em an√°lise. Documenta√ß√£o completa apresentada. Aguardando aprova√ß√£o da matriz.',
                'matriz_aprovacao' => null,
                'comentario_matriz' => null,
                'motivo_rejeicao' => null,
            ],
            [
                'valor_solicitado' => 8500.00,
                'status' => 'Aprovado',
                'descricao_solicitante' => 'Solicita√ß√£o de cr√©dito para campanha de marketing digital e aquisi√ß√£o de novos clientes no segundo trimestre.',
                'comentario_agencia' => 'An√°lise realizada. Cliente com bom hist√≥rico e capacidade de pagamento comprovada.',
                'matriz_aprovacao' => true,
                'comentario_matriz' => 'Aprovado. Cliente tem excelente hist√≥rico e a estrat√©gia de marketing est√° alinhada com nossos objetivos.',
                'motivo_rejeicao' => null,
            ],
            [
                'valor_solicitado' => 25000.00,
                'status' => 'Negado',
                'descricao_solicitante' => 'Solicita√ß√£o para investimento em nova linha de produtos importados com alto potencial de mercado.',
                'comentario_agencia' => 'Ap√≥s an√°lise detalhada, identificamos riscos elevados no projeto apresentado.',
                'matriz_aprovacao' => false,
                'comentario_matriz' => 'Projeto apresenta muitas incertezas de mercado.',
                'motivo_rejeicao' => 'An√°lise de risco indicou exposi√ß√£o muito alta para o valor solicitado. Mercado de produtos importados muito vol√°til no momento atual. Sugerimos reformular a proposta com valores menores.',
            ],
            [
                'valor_solicitado' => 3500.00,
                'status' => 'Aprovado',
                'descricao_solicitante' => 'Cr√©dito necess√°rio para regulariza√ß√£o fiscal e quita√ß√£o de pend√™ncias tribut√°rias.',
                'comentario_agencia' => 'Situa√ß√£o fiscal analisada. Regulariza√ß√£o √© fundamental para continuidade das opera√ß√µes.',
                'matriz_aprovacao' => true,
                'comentario_matriz' => 'Aprovado para regulariza√ß√£o fiscal. Valor adequado para resolu√ß√£o das pend√™ncias.',
                'motivo_rejeicao' => null,
            ],
            [
                'valor_solicitado' => 12000.00,
                'status' => 'Pendente',
                'descricao_solicitante' => 'Solicita√ß√£o para renova√ß√£o da frota de ve√≠culos de entrega, visando melhorar a log√≠stica e reduzir custos operacionais.',
                'comentario_agencia' => null,
                'matriz_aprovacao' => null,
                'comentario_matriz' => null,
                'motivo_rejeicao' => null,
            ],
            [
                'valor_solicitado' => 7800.00,
                'status' => 'Em An√°lise',
                'descricao_solicitante' => 'Cr√©dito para capacita√ß√£o da equipe e implementa√ß√£o de sistema de gest√£o integrado (ERP).',
                'comentario_agencia' => 'Proposta interessante. Verificando viabilidade t√©cnica e retorno do investimento.',
                'matriz_aprovacao' => null,
                'comentario_matriz' => null,
                'motivo_rejeicao' => null,
            ],
            [
                'valor_solicitado' => 18000.00,
                'status' => 'Cancelado',
                'descricao_solicitante' => 'Solicita√ß√£o para abertura de nova unidade no interior do estado.',
                'comentario_agencia' => 'Solicita√ß√£o cancelada a pedido do pr√≥prio solicitante.',
                'matriz_aprovacao' => null,
                'comentario_matriz' => null,
                'motivo_rejeicao' => null,
            ],
            [
                'valor_solicitado' => 4200.00,
                'status' => 'Aprovado',
                'descricao_solicitante' => 'Necess√°rio para aquisi√ß√£o de mat√©ria-prima e aumento do estoque para atender demanda sazonal.',
                'comentario_agencia' => 'Demanda sazonal comprovada atrav√©s de hist√≥rico de vendas.',
                'matriz_aprovacao' => true,
                'comentario_matriz' => 'Aprovado. Estrat√©gia sazonal bem fundamentada.',
                'motivo_rejeicao' => null,
            ],
            [
                'valor_solicitado' => 9500.00,
                'status' => 'Negado',
                'descricao_solicitante' => 'Solicita√ß√£o para investimento em criptomoedas e ativos digitais.',
                'comentario_agencia' => 'Investimento de alto risco n√£o alinhado com pol√≠ticas da empresa.',
                'matriz_aprovacao' => false,
                'comentario_matriz' => 'Negado. Investimentos especulativos n√£o s√£o permitidos.',
                'motivo_rejeicao' => 'Pol√≠tica da empresa n√£o permite investimentos especulativos em criptomoedas. Sugerimos apresentar proposta com investimentos mais conservadores e alinhados ao core business.',
            ],
        ];

        $solicitacoesCriadas = 0;
        $usuariosDisponiveis = $usuarios->shuffle();

        foreach ($solicitacoesExemplo as $index => $dadosSolicitacao) {
            $solicitante = $usuariosDisponiveis[$index % $usuariosDisponiveis->count()];
            $criador = $usuariosDisponiveis[($index + 1) % $usuariosDisponiveis->count()];
            $matriz = $usuariosDisponiveis[($index + 2) % $usuariosDisponiveis->count()];

            try {
                $solicitacao = SolicitacaoCredito::create(array_merge($dadosSolicitacao, [
                    'usuario_solicitante_id' => $solicitante->id,
                    'usuario_criador_id' => $criador->id,
                    'matriz_id' => in_array($dadosSolicitacao['status'], ['Aprovado', 'Negado']) ? $matriz->id : null,
                ]));

                $solicitacoesCriadas++;
                $valorFormatado = 'R$ ' . number_format($solicitacao->valor_solicitado, 2, ',', '.');
                $this->command->info("‚úÖ Solicita√ß√£o #{$solicitacao->id} criada - {$valorFormatado} - Status: {$solicitacao->status} - Solicitante: {$solicitante->nome}");

            } catch (\Exception $e) {
                $this->command->error("‚ùå Erro ao criar solicita√ß√£o {$index}: " . $e->getMessage());
            }
        }

        // Criar algumas solicita√ß√µes extras com dados aleat√≥rios
        $this->criarSolicitacoesExtras($usuariosDisponiveis, $solicitacoesCriadas);

        $totalFinal = SolicitacaoCredito::count();
        $this->command->info("üéâ {$totalFinal} solicita√ß√µes de cr√©dito criadas com sucesso!");

        // Exibir estat√≠sticas
        $this->exibirEstatisticas();
    }

    private function criarSolicitacoesExtras($usuarios, &$contador)
    {
        $this->command->info('üéØ Criando solicita√ß√µes extras...');

        $descricoes = [
            'Cr√©dito para moderniza√ß√£o do sistema de atendimento ao cliente.',
            'Investimento em energia solar para redu√ß√£o de custos operacionais.',
            'Aquisi√ß√£o de software de gest√£o para otimiza√ß√£o de processos.',
            'Reforma das instala√ß√µes f√≠sicas para melhor atendimento.',
            'Compra de equipamentos de seguran√ßa e monitoramento.',
            'Investimento em treinamento e certifica√ß√µes da equipe.',
        ];

        $statusPossiveis = ['Pendente', 'Em An√°lise', 'Aprovado', 'Negado'];

        for ($i = 0; $i < 6; $i++) {
            $solicitante = $usuarios->random();
            $criador = $usuarios->random();
            $matriz = $usuarios->random();
            $status = $statusPossiveis[array_rand($statusPossiveis)];

            $dadosExtra = [
                'valor_solicitado' => rand(1000, 20000),
                'status' => $status,
                'descricao_solicitante' => $descricoes[$i],
                'usuario_solicitante_id' => $solicitante->id,
                'usuario_criador_id' => $criador->id,
                'matriz_id' => in_array($status, ['Aprovado', 'Negado']) ? $matriz->id : null,
            ];

            // Definir campos baseados no status
            switch ($status) {
                case 'Pendente':
                    $dadosExtra = array_merge($dadosExtra, [
                        'comentario_agencia' => null,
                        'matriz_aprovacao' => null,
                        'comentario_matriz' => null,
                        'motivo_rejeicao' => null,
                    ]);
                    break;

                case 'Em An√°lise':
                    $dadosExtra = array_merge($dadosExtra, [
                        'comentario_agencia' => 'Solicita√ß√£o em processo de an√°lise. Documenta√ß√£o em revis√£o.',
                        'matriz_aprovacao' => null,
                        'comentario_matriz' => null,
                        'motivo_rejeicao' => null,
                    ]);
                    break;

                case 'Aprovado':
                    $dadosExtra = array_merge($dadosExtra, [
                        'comentario_agencia' => 'An√°lise conclu√≠da com parecer favor√°vel.',
                        'matriz_aprovacao' => true,
                        'comentario_matriz' => 'Aprovado conforme an√°lise t√©cnica apresentada.',
                        'motivo_rejeicao' => null,
                    ]);
                    break;

                case 'Negado':
                    $dadosExtra = array_merge($dadosExtra, [
                        'comentario_agencia' => 'An√°lise conclu√≠da com restri√ß√µes identificadas.',
                        'matriz_aprovacao' => false,
                        'comentario_matriz' => 'Negado conforme pol√≠tica de cr√©dito.',
                        'motivo_rejeicao' => 'Valor solicitado acima do limite aprovado para o perfil do solicitante.',
                    ]);
                    break;
            }

            try {
                $solicitacao = SolicitacaoCredito::create($dadosExtra);
                $contador++;

                $valorFormatado = 'R$ ' . number_format($solicitacao->valor_solicitado, 2, ',', '.');
                $this->command->info("‚úÖ Solicita√ß√£o extra #{$solicitacao->id} criada - {$valorFormatado} - Status: {$status}");

            } catch (\Exception $e) {
                $this->command->error("‚ùå Erro ao criar solicita√ß√£o extra {$i}: " . $e->getMessage());
            }
        }
    }

    private function exibirEstatisticas()
    {
        $stats = [
            'Total de Solicita√ß√µes' => SolicitacaoCredito::count(),
            'Pendentes' => SolicitacaoCredito::where('status', 'Pendente')->count(),
            'Em An√°lise' => SolicitacaoCredito::where('status', 'Em An√°lise')->count(),
            'Aprovadas' => SolicitacaoCredito::where('status', 'Aprovado')->count(),
            'Negadas' => SolicitacaoCredito::where('status', 'Negado')->count(),
            'Canceladas' => SolicitacaoCredito::where('status', 'Cancelado')->count(),
        ];

        $this->command->info('üìä Estat√≠sticas das solicita√ß√µes:');
        foreach ($stats as $label => $value) {
            $this->command->info("   {$label}: {$value}");
        }

        // Valores financeiros
        $valoresStats = [
            'Valor Total Solicitado' => 'R$ ' . number_format(SolicitacaoCredito::sum('valor_solicitado'), 2, ',', '.'),
            'Valor Aprovado' => 'R$ ' . number_format(SolicitacaoCredito::where('status', 'Aprovado')->sum('valor_solicitado'), 2, ',', '.'),
            'Valor Negado' => 'R$ ' . number_format(SolicitacaoCredito::where('status', 'Negado')->sum('valor_solicitado'), 2, ',', '.'),
            'Valor Pendente' => 'R$ ' . number_format(SolicitacaoCredito::whereIn('status', ['Pendente', 'Em An√°lise'])->sum('valor_solicitado'), 2, ',', '.'),
        ];

        $this->command->info('üí∞ Estat√≠sticas financeiras:');
        foreach ($valoresStats as $label => $value) {
            $this->command->info("   {$label}: {$value}");
        }

        // Taxa de aprova√ß√£o
        $totalAnalisadas = SolicitacaoCredito::whereIn('status', ['Aprovado', 'Negado'])->count();
        $aprovadas = SolicitacaoCredito::where('status', 'Aprovado')->count();

        if ($totalAnalisadas > 0) {
            $taxaAprovacao = round(($aprovadas / $totalAnalisadas) * 100, 1);
            $this->command->info("üìà Taxa de Aprova√ß√£o: {$taxaAprovacao}%");
        }

        // Ticket m√©dio
        $ticketMedio = SolicitacaoCredito::avg('valor_solicitado');
        $this->command->info("üéØ Ticket M√©dio: R$ " . number_format($ticketMedio, 2, ',', '.'));

        // Top solicitantes
        $this->command->info('üë• Top solicitantes:');
        $topSolicitantes = SolicitacaoCredito::with('usuarioSolicitante')
            ->selectRaw('usuario_solicitante_id, COUNT(*) as total, SUM(valor_solicitado) as valor_total')
            ->groupBy('usuario_solicitante_id')
            ->orderBy('total', 'desc')
            ->take(3)
            ->get();

        foreach ($topSolicitantes as $item) {
            $nome = $item->usuarioSolicitante->nome ?? 'N/A';
            $valorTotal = 'R$ ' . number_format($item->valor_total, 2, ',', '.');
            $this->command->info("   {$nome}: {$item->total} solicita√ß√µes - {$valorTotal}");
        }
    }
}
